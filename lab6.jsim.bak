* Candari, Roger II
* Lluisma, Arthur Jed
* Reyes, Francesca Dominique

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

* the full adder

.subckt fa a b carry_in sum carry_out
* the sum
Xfirst a b subout1 xor2
Xsecond subout1 carry_in sum xor2
* the carry
Xthird subout1 carry_in subout2 nand2
Xfourth a b subout3 nand2
Xfifth subout2 subout3 carry_out nand2
.ends

* the 32-bit full adder

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]
Xbit[31:0] a[31:0] b[31:0] c_out[30:0] c_in0 sum[31:0] c_out[31:0] fa
.ends

* the 32-bit counter

.subckt counter32 reset a[31:0] f[31:0] clk
Xadd a[31:0] f[31:0] 0 sum[31:0] c_out1 c_out2 add32
Xmux[31:0] reset#32 sum[31:0] 0#32 z[31:0] mux2
Xdreg[31:0] z[31:0] clk#32 f[31:0] dreg
.ends

* the 32-bit adder/subtractor

.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
Xinv b[31:0] invb[31:0] inverter
Xmux op0#32 b[31:0] invb[31:0] muxb[31:0] mux2
Xadd a[31:0] muxb[31:0] op0 fas[31:0] out[31:30] add32
* get n
.connect fas31 n
* get v
Xv out31 out30 v xor2
* get z
Xnor fas[31:16] fas[15:0] norout[15:0] nor2
Xnand1 norout[15:8] norout[7:0] nand1out[7:0] nand2
Xnor1 nand1out[7:4] nand1out[3:0] nor1out[3:0] nor2
Xnand2 nor1out[3:2] nor1out[1:0] nand2out[1:0] nand2
Xnor2 nand2out1 nand2out0 z nor2
.ends

* the 32-bit comparator

.subckt cmp32 n v z op[2:1] fcmp[31:0]
*if op1 = 1, check for a = b, z = 1
Xinvop1 op1 op1_inv inverter
Xinvz z z_inv inverter
Xcheckeq op1_inv z_inv op1norz nor2 
*if op2 = 1, check for a < b, n = 1
Xchecknv n v tempout xor2
Xinvop2 op2 op2_inv inverter
Xinvtempout tempout tempout_inv inverter
Xcheckless op2_inv tempout_inv op2norn nor2
*if op1 op2 = 1, check for a < b or a = b
Xinvop1norz op1norz out1_inv inverter
Xinvop2norn op2norn out2_inv inverter
Xfinalcheck out1_inv out2_inv fcmp0 nand2
.connect 0 fcmp[31:1]
.ends

* bool32 circuit

.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]
Xmux a[31:0] b[31:0] op3 op2 op1 op0 fbool[31:0] mux4
.ends




* chaining diagram

Xbool a[31:0] b[31:0] op[3:0] fbool[31:0] bool32

Wa a[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns) + 0x55555555
Wb b[31:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns) + 0x00000002
Wc op[1:0] nrz(0, 5, 20ns, 0ns, 0.001ns, 0.001ns) + 01

.tran 640ns
.plot a[31:0]
.plot b[4:0]
.plot op[1:0]
.plot fshift[31:0]