* Candari, Roger II
* Lluisma, Arthur Jed
* Reyes, Francesca Dominique

.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"

* the full adder

.subckt fa a b carry_in sum carry_out
* the sum
Xfirst a b subout1 xor2
Xsecond subout1 carry_in sum xor2
* the carry
Xthird subout1 carry_in subout2 nand2
Xfourth a b subout3 nand2
Xfifth subout2 subout3 carry_out nand2
.ends

* the 32-bit full adder

.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]
Xbit[31:0] a[31:0] b[31:0] c_out[30:0] c_in0 sum[31:0] c_out[31:0] fa
.ends

* the 32-bit counter

.subckt counter32 reset a[31:0] f[31:0] clk
Xadd a[31:0] f[31:0] 0 sum[31:0] c_out1 c_out2 add32
Xmux[31:0] reset#32 sum[31:0] 0#32 z[31:0] mux2
Xdreg[31:0] z[31:0] clk#32 f[31:0] dreg
.ends

* the 32-bit adder/subtractor

.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
Xor b[31:0] op0#32 finalb[31:0] xor2
Xadd a[31:0] finalb[31:0] op0 fas[31:0] out[31:30] add32
* get n
.connect fas31 n
* get v
Xv out31 out30 v xor2
* get z
Xnor fas[31:16] fas[15:0] norout[15:0] nor2
Xnand1 norout[15:8] norout[7:0] nand1out[7:0] nand2
Xnor1 nand1out[7:4] nand1out[3:0] nor1out[3:0] nor2
Xnand2 nor1out[3:2] nor1out[1:0] nand2out[1:0] nand2
Xnor2 nand2out1 nand2out0 z nor2
.ends

* the 32-bit comparator

.subckt cmp32 n v z op[2:1] fcmp[31:0]
*if op1 = 1, check for a = b, z = 1
Xcheckeq op1 z op1nandz nand2
*if op2 = 1, check for a < b, n = 1
Xchecknv n v tempout xor2
Xcheckless op2 tempout op2nandtemp nand2
*if op1 op2 = 1, check for a < b or a = b
Xfinalcheck op1nandz op2nandtemp fcmp0 nand2
.connect 0 fcmp[31:1]
.ends

* the 32-bit bool

.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]
Xmux a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4
.ends

* the 32-bit shifter

.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]
Xfill a31 op1 fll and2
Xflipin op0#32 a[0:31] a[31:0] in[31:0] mux2    
X16shift b4#32 in[31:0] fll#16 in[31:16] 16temp[31:0] mux2
X8shift b3#32 16temp[31:0] fll#8 16temp[31:8]  8temp[31:0] mux2
X4shift b2#32 8temp[31:0] fll#4 8temp[31:4]  4temp[31:0] mux2
X2shift b1#32 4temp[31:0] fll#2 4temp[31:2]  2temp[31:0] mux2
X1shift b0#32 2temp[31:0] fll#1 2temp[31:1]  1temp[31:0] mux2
Xflipfn op0#32 1temp[0:31] 1temp[31:0] fshift[31:0] mux2
.ends

* the 32-bit alu

.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]
Xas a[31:0] b[31:0] alufn0 f1_[31:0] n v z as32
Xbool a[31:0] b[31:0] alufn[3:0] f2_[31:0] bool32
Xshift a[31:0] b[4:0] alufn[1:0] f3_[31:0] shift32
Xcmp n v z alufn[2:1] f4_[31:0] cmp32
Xmux alufn5#32 alufn4#32 f1_[31:0] f3_[31:0] f2_[31:0] f4_[31:0] f[31:0] mux4
.ends
