* Candari, Roger II
* Lluisma, Arthur Jed
* Reyes, Francesca Dominique

.include "myHeader.jsim"

*******************************************************************************
* ALU
* inside "myHeader.jsim"

*******************************************************************************
* Instruction / Data Memory File

Xmemory  vdd  0    0   pc[8:2]    inst[31:0]
+        vdd  0    0   mema[8:2]  memrd[31:0]
+        0    clk2  wr  mema[8:2]  memwd[31:0]
+ $memory width=32 nlocations=128 file="lab7.bin"

Xjc_rb c[15:11] rb[4:0] join
Xjmemwd_rd2_ memwd[31:0] rd2_[31:0] join

*******************************************************************************
* Register File

Xregisters  vdd  0    0      ra1_[4:0]  rd1_[31:0]
+           vdd  0    0      ra2_[4:0]  rd2_[31:0]
+           0    clk2  werf_  wa[4:0]    wd[31:0]
+ $memory width=32 nlocations=32 contents=(
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+   0 0 0 0 0 0 0 0
+ )

Xjwa_rc wa[4:0] rc[4:0] join

Xwerfcheck1 wa[4:1] z1 and4
Xwerfcheck2 wa0 z1 z2 and2
Xwerf z2 werf 0 werf_ mux2

*******************************************************************************
* Control Logic

Xcontrol  vdd  0  0  z opcode[5:0]  control[13:0]
+ $memory width=14 nlocations=128 contents=(
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b00000000000001 0b01000000000001 0b11000000000000
+   0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+   0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+   0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+   0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000 0b11000000000000
+   0b00011000000001 0b00110000000010 0b11000000000000 0b10000000000001 0b11000000000000 0b01000000000001 0b00000000000001 0b11000000000000
+   0b00000100000001 0b00000100000101 0b11000000000000 0b11000000000000 0b00000111001101 0b00000111010101 0b00000111011101 0b11000000000000
+   0b00000101100001 0b00000101111001 0b00000101011001 0b11000000000000 0b00000110000001 0b00000110000101 0b00000110001101 0b11000000000000
+   0b00010100000001 0b00010100000101 0b11000000000000 0b11000000000000 0b00010111001101 0b00010111010101 0b00010111011101 0b11000000000000
+   0b00010101100001 0b00010101111001 0b00010101011001 0b11000000000000 0b00010110000001 0b00010110000101 0b00010110001101 0b11000000000000
+ )

* helper subckt
.subckt join S T
  .connect S T
.ends

Xjcontrola control[13:12] pcsel[1:0]   join
Xjcontrolb control11      ra2sel       join
Xjcontrolc control10      bsel         join
Xjcontrold control[9:8]   wdsel[1:0]   join
Xjcontrole control[7:2]   alufn[5:0]   join
Xjcontrolf control1       wr_control   join
Xjcontrolg control0       werf_control join

Xjinsta inst[31:26] opcode[5:0] join
Xjinstb inst[25:21] rc[4:0]     join
Xjinstc inst[20:16] ra[4:0]     join
Xjinstd inst[15:11] rb[4:0]     join
Xjinste inst[15:0]  c[15:0]     join

*******************************************************************************
* MUXs for PCSEL, RA2SEL, BSEL, WDSEL

Xpcsel_ pcsel0#7 pcsel1#7 pc_incr[8:2] br[8:2] rd1_[8:2] pc[8:2] pc_result[8:2] mux4

Xra2sel_ ra2sel#5 rb[4:0] rc[4:0] ra2_[4:0] mux2 

Xbsel_ bsel#32 rd2_[31:0] c15#16 c[15:0] bsel_result[31:0] mux2

Xalu_ rd1_[31:0] bsel_result[31:0] alufn[5:0] mema[31:0] alu32

Xwdsel0_ wdsel0#32 0#23 pc_incr[8:2] 0#2 mema[31:0] wd_br_alu[31:0] mux2
Xwdsel1_ wdsel1#32 wd_br_alu[31:0] memrd[31:0] wd[31:0] mux2

*******************************************************************************
* NOR gate for Z

Xzcheck1 rd1_31 rd1_30 y0 nor2
Xzcheck2 rd1_[29:0] y[0:29] y[1:30] nor2
.connect y30 z

*******************************************************************************
* Program Counter (PC)

Xpc pc_in[8:2] clk2#7 pc[8:2] dreg
Xpcincr pc[8:2] 0#7 pc_c_out[7:2] vdd pc_incr[8:2] pc_c_out[8:2] fa
.connect 0 pc[1:0]

*******************************************************************************
* Jump Target (JT)

Xjra1__ra ra1_[4:0] ra[4:0] join

*******************************************************************************
* Branch Target (PC + 4 + 4C)

Xpcbeq pc_incr[8:2] c[6:0] br_c_out[7:2] 0 br[8:2] br_c_out[8:2] fa

*******************************************************************************
* Reset Logic

Wreset reset nrz(0, 5, 10ns, 0ns, 0.001ns, 0.001ns) 1 0
Xreset reset#9 wr_control werf_control pc_result[8:2] 0#9 wr werf pc_in[8:2] mux2

*******************************************************************************
* Other Stuff

* plot some signals together
Xjdisplaya ra2_b_wdsel[3:0] ra2sel bsel wdsel[1:0] join
Xjdisplayb wr_werfs[2:0]    wr werf werf_          join

* plot the signals
.tran 1280ns
.plot pc[8:0]
.plot betaop(opcode[5:0])
.plot d(ra[4:0])
.plot d(rb[4:0])
.plot d(rc[4:0])
.plot sd(c[15:0])
.plot b(pcsel[1:0])
.plot b(ra2_b_wdsel[3:0])
.plot b(alufn[5:0])
.plot b(wr_werfs[2:0])
.plot sd(rd1_[31:0])
.plot sd(rd2_[31:0])
.plot sd(wd[31:0])
.plot d(mema[8:0])
.plot sd(memrd[31:0])
.plot sd(memwd[31:0])
